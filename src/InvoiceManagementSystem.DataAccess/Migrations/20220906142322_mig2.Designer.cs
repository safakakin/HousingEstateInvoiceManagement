// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RezervationSystem.DataAccess.Contexts;

#nullable disable

namespace InvoiceManagementSystem.DataAccess.Migrations
{
    [DbContext(typeof(InvoiceManagementSystemDbContext))]
    [Migration("20220906142322_mig2")]
    partial class mig2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Customer"
                        });
                });

            modelBuilder.Entity("Core.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "asdfasd1@hotmail.com",
                            FirstName = "Ahmet",
                            LastName = "Safak",
                            PasswordHash = new byte[] { 77, 252, 31, 104, 140, 247, 32, 245, 233, 255, 106, 99, 111, 76, 28, 196, 162, 17, 75, 216, 55, 200, 3, 30, 29, 168, 34, 19, 44, 246, 54, 14, 232, 122, 172, 19, 216, 4, 250, 211, 156, 108, 181, 99, 236, 102, 20, 126, 31, 196, 221, 23, 159, 78, 15, 228, 218, 37, 237, 198, 140, 99, 71, 3 },
                            PasswordSalt = new byte[] { 107, 69, 50, 150, 108, 70, 51, 41, 176, 153, 208, 7, 195, 16, 246, 63, 22, 58, 23, 149, 247, 192, 64, 195, 210, 43, 181, 46, 62, 84, 207, 211, 79, 88, 173, 67, 164, 140, 60, 119, 218, 234, 103, 254, 67, 137, 181, 54, 75, 97, 156, 111, 203, 228, 163, 79, 57, 209, 177, 106, 125, 228, 90, 149, 69, 67, 172, 149, 65, 150, 185, 168, 118, 247, 254, 208, 187, 171, 161, 116, 49, 127, 17, 66, 212, 251, 27, 227, 83, 102, 122, 13, 126, 231, 187, 8, 45, 194, 244, 11, 11, 203, 255, 189, 126, 240, 190, 99, 206, 94, 254, 153, 77, 10, 186, 105, 143, 126, 105, 128, 241, 170, 244, 159, 253, 31, 150, 162 },
                            PhoneNumber = "5320000000",
                            Plate = "61 AC 61",
                            RoleId = 1,
                            TC = "11111111111"
                        },
                        new
                        {
                            Id = 2,
                            Email = "asdfasd2@hotmail.com",
                            FirstName = "Koc",
                            LastName = "Soy",
                            PasswordHash = new byte[] { 77, 252, 31, 104, 140, 247, 32, 245, 233, 255, 106, 99, 111, 76, 28, 196, 162, 17, 75, 216, 55, 200, 3, 30, 29, 168, 34, 19, 44, 246, 54, 14, 232, 122, 172, 19, 216, 4, 250, 211, 156, 108, 181, 99, 236, 102, 20, 126, 31, 196, 221, 23, 159, 78, 15, 228, 218, 37, 237, 198, 140, 99, 71, 3 },
                            PasswordSalt = new byte[] { 107, 69, 50, 150, 108, 70, 51, 41, 176, 153, 208, 7, 195, 16, 246, 63, 22, 58, 23, 149, 247, 192, 64, 195, 210, 43, 181, 46, 62, 84, 207, 211, 79, 88, 173, 67, 164, 140, 60, 119, 218, 234, 103, 254, 67, 137, 181, 54, 75, 97, 156, 111, 203, 228, 163, 79, 57, 209, 177, 106, 125, 228, 90, 149, 69, 67, 172, 149, 65, 150, 185, 168, 118, 247, 254, 208, 187, 171, 161, 116, 49, 127, 17, 66, 212, 251, 27, 227, 83, 102, 122, 13, 126, 231, 187, 8, 45, 194, 244, 11, 11, 203, 255, 189, 126, 240, 190, 99, 206, 94, 254, 153, 77, 10, 186, 105, 143, 126, 105, 128, 241, 170, 244, 159, 253, 31, 150, 162 },
                            PhoneNumber = "5320000001",
                            Plate = "61 AC 62",
                            RoleId = 2,
                            TC = "11111111112"
                        },
                        new
                        {
                            Id = 3,
                            Email = "asdfasd3@hotmail.com",
                            FirstName = "Zafer",
                            LastName = "Kara",
                            PasswordHash = new byte[] { 77, 252, 31, 104, 140, 247, 32, 245, 233, 255, 106, 99, 111, 76, 28, 196, 162, 17, 75, 216, 55, 200, 3, 30, 29, 168, 34, 19, 44, 246, 54, 14, 232, 122, 172, 19, 216, 4, 250, 211, 156, 108, 181, 99, 236, 102, 20, 126, 31, 196, 221, 23, 159, 78, 15, 228, 218, 37, 237, 198, 140, 99, 71, 3 },
                            PasswordSalt = new byte[] { 107, 69, 50, 150, 108, 70, 51, 41, 176, 153, 208, 7, 195, 16, 246, 63, 22, 58, 23, 149, 247, 192, 64, 195, 210, 43, 181, 46, 62, 84, 207, 211, 79, 88, 173, 67, 164, 140, 60, 119, 218, 234, 103, 254, 67, 137, 181, 54, 75, 97, 156, 111, 203, 228, 163, 79, 57, 209, 177, 106, 125, 228, 90, 149, 69, 67, 172, 149, 65, 150, 185, 168, 118, 247, 254, 208, 187, 171, 161, 116, 49, 127, 17, 66, 212, 251, 27, 227, 83, 102, 122, 13, 126, 231, 187, 8, 45, 194, 244, 11, 11, 203, 255, 189, 126, 240, 190, 99, 206, 94, 254, 153, 77, 10, 186, 105, 143, 126, 105, 128, 241, 170, 244, 159, 253, 31, 150, 162 },
                            PhoneNumber = "5320000002",
                            Plate = "61 AC 63",
                            RoleId = 2,
                            TC = "11111111113"
                        });
                });

            modelBuilder.Entity("RezervationSystem.Entity.Concrete.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BlockID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CustomerID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Floor")
                        .HasColumnType("integer");

                    b.Property<bool>("IsEmpty")
                        .HasColumnType("boolean");

                    b.Property<int>("StyleID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BlockID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StyleID");

                    b.ToTable("Apartments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlockID = 1,
                            CustomerID = 1,
                            Floor = 18,
                            IsEmpty = true,
                            StyleID = 1
                        },
                        new
                        {
                            Id = 2,
                            BlockID = 2,
                            CustomerID = 2,
                            Floor = 19,
                            IsEmpty = true,
                            StyleID = 2
                        },
                        new
                        {
                            Id = 3,
                            BlockID = 3,
                            CustomerID = 3,
                            Floor = 20,
                            IsEmpty = true,
                            StyleID = 3
                        });
                });

            modelBuilder.Entity("RezervationSystem.Entity.Concrete.Block", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Blocks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "A Block"
                        },
                        new
                        {
                            Id = 2,
                            Name = "B Block"
                        },
                        new
                        {
                            Id = 3,
                            Name = "C Block"
                        });
                });

            modelBuilder.Entity("RezervationSystem.Entity.Concrete.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Balance")
                        .HasColumnType("integer");

                    b.Property<int>("CardNumber")
                        .HasColumnType("integer");

                    b.Property<int>("CardPassword")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CustomerID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerID");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 3000,
                            CardNumber = 11223344,
                            CardPassword = 1234,
                            CustomerID = 1
                        },
                        new
                        {
                            Id = 2,
                            Balance = 4000,
                            CardNumber = 11112222,
                            CardPassword = 4321,
                            CustomerID = 2
                        },
                        new
                        {
                            Id = 3,
                            Balance = 5000,
                            CardNumber = 33334444,
                            CardPassword = 1221,
                            CustomerID = 3
                        });
                });

            modelBuilder.Entity("RezervationSystem.Entity.Concrete.Debt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApartmentID")
                        .HasColumnType("integer");

                    b.Property<int>("Cost")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CustomerID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Debts");
                });

            modelBuilder.Entity("RezervationSystem.Entity.Concrete.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CustomerID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("WrotenMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("RezervationSystem.Entity.Concrete.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApartmentID")
                        .HasColumnType("integer");

                    b.Property<int>("CardId")
                        .HasColumnType("integer");

                    b.Property<int>("Cost")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CustomerID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentID");

                    b.HasIndex("CardId");

                    b.HasIndex("CustomerID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("RezervationSystem.Entity.Concrete.Style", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Styles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "1+1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "2+1"
                        },
                        new
                        {
                            Id = 3,
                            Name = "3+1"
                        },
                        new
                        {
                            Id = 4,
                            Name = "4+1"
                        },
                        new
                        {
                            Id = 5,
                            Name = "5+1"
                        });
                });

            modelBuilder.Entity("RezervationSystem.Entity.Concrete.Apartment", b =>
                {
                    b.HasOne("RezervationSystem.Entity.Concrete.Block", "Block")
                        .WithMany()
                        .HasForeignKey("BlockID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Concrete.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RezervationSystem.Entity.Concrete.Style", "Style")
                        .WithMany()
                        .HasForeignKey("StyleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Customer");

                    b.Navigation("Style");
                });

            modelBuilder.Entity("RezervationSystem.Entity.Concrete.Card", b =>
                {
                    b.HasOne("Core.Entities.Concrete.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("RezervationSystem.Entity.Concrete.Debt", b =>
                {
                    b.HasOne("RezervationSystem.Entity.Concrete.Apartment", "Apartment")
                        .WithMany()
                        .HasForeignKey("ApartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Concrete.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("RezervationSystem.Entity.Concrete.Message", b =>
                {
                    b.HasOne("Core.Entities.Concrete.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("RezervationSystem.Entity.Concrete.Payment", b =>
                {
                    b.HasOne("RezervationSystem.Entity.Concrete.Apartment", "Apartment")
                        .WithMany()
                        .HasForeignKey("ApartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RezervationSystem.Entity.Concrete.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Concrete.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("Card");

                    b.Navigation("Customer");
                });
#pragma warning restore 612, 618
        }
    }
}
