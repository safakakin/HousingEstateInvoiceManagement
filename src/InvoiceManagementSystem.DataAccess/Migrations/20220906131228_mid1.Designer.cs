// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RezervationSystem.DataAccess.Contexts;

#nullable disable

namespace InvoiceManagementSystem.DataAccess.Migrations
{
    [DbContext(typeof(InvoiceManagementSystemDbContext))]
    [Migration("20220906131228_mid1")]
    partial class mid1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Customer"
                        });
                });

            modelBuilder.Entity("Core.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "asdfasd1@hotmail.com",
                            FirstName = "Ahmet",
                            LastName = "Safak",
                            PasswordHash = new byte[] { 10, 139, 94, 235, 41, 218, 90, 36, 55, 160, 143, 160, 251, 124, 87, 79, 196, 202, 246, 18, 176, 251, 192, 73, 178, 199, 21, 174, 233, 92, 94, 33, 155, 46, 172, 127, 19, 78, 164, 34, 5, 173, 179, 85, 223, 23, 93, 47, 144, 26, 246, 198, 113, 228, 83, 129, 52, 72, 57, 244, 133, 154, 249, 200 },
                            PasswordSalt = new byte[] { 116, 6, 139, 142, 251, 55, 38, 132, 97, 132, 218, 194, 152, 110, 33, 71, 101, 137, 55, 33, 235, 220, 249, 113, 126, 73, 175, 92, 148, 49, 17, 203, 220, 121, 94, 36, 187, 210, 238, 228, 129, 163, 252, 55, 219, 189, 1, 154, 113, 60, 10, 32, 218, 173, 43, 111, 196, 250, 197, 147, 49, 8, 159, 129, 205, 78, 167, 0, 111, 193, 165, 113, 16, 47, 143, 73, 207, 214, 163, 29, 12, 149, 14, 27, 121, 25, 207, 250, 194, 52, 110, 193, 108, 80, 157, 186, 129, 57, 156, 96, 174, 113, 189, 190, 83, 215, 120, 247, 69, 241, 175, 142, 52, 243, 151, 69, 125, 75, 215, 68, 160, 26, 140, 16, 184, 45, 171, 87 },
                            PhoneNumber = "5320000000",
                            Plate = "61 AC 61",
                            RoleId = 1,
                            TC = "11111111111"
                        },
                        new
                        {
                            Id = 2,
                            Email = "asdfasd2@hotmail.com",
                            FirstName = "Koc",
                            LastName = "Soy",
                            PasswordHash = new byte[] { 10, 139, 94, 235, 41, 218, 90, 36, 55, 160, 143, 160, 251, 124, 87, 79, 196, 202, 246, 18, 176, 251, 192, 73, 178, 199, 21, 174, 233, 92, 94, 33, 155, 46, 172, 127, 19, 78, 164, 34, 5, 173, 179, 85, 223, 23, 93, 47, 144, 26, 246, 198, 113, 228, 83, 129, 52, 72, 57, 244, 133, 154, 249, 200 },
                            PasswordSalt = new byte[] { 116, 6, 139, 142, 251, 55, 38, 132, 97, 132, 218, 194, 152, 110, 33, 71, 101, 137, 55, 33, 235, 220, 249, 113, 126, 73, 175, 92, 148, 49, 17, 203, 220, 121, 94, 36, 187, 210, 238, 228, 129, 163, 252, 55, 219, 189, 1, 154, 113, 60, 10, 32, 218, 173, 43, 111, 196, 250, 197, 147, 49, 8, 159, 129, 205, 78, 167, 0, 111, 193, 165, 113, 16, 47, 143, 73, 207, 214, 163, 29, 12, 149, 14, 27, 121, 25, 207, 250, 194, 52, 110, 193, 108, 80, 157, 186, 129, 57, 156, 96, 174, 113, 189, 190, 83, 215, 120, 247, 69, 241, 175, 142, 52, 243, 151, 69, 125, 75, 215, 68, 160, 26, 140, 16, 184, 45, 171, 87 },
                            PhoneNumber = "5320000001",
                            Plate = "61 AC 62",
                            RoleId = 2,
                            TC = "11111111112"
                        },
                        new
                        {
                            Id = 3,
                            Email = "asdfasd3@hotmail.com",
                            FirstName = "Zafer",
                            LastName = "Kara",
                            PasswordHash = new byte[] { 10, 139, 94, 235, 41, 218, 90, 36, 55, 160, 143, 160, 251, 124, 87, 79, 196, 202, 246, 18, 176, 251, 192, 73, 178, 199, 21, 174, 233, 92, 94, 33, 155, 46, 172, 127, 19, 78, 164, 34, 5, 173, 179, 85, 223, 23, 93, 47, 144, 26, 246, 198, 113, 228, 83, 129, 52, 72, 57, 244, 133, 154, 249, 200 },
                            PasswordSalt = new byte[] { 116, 6, 139, 142, 251, 55, 38, 132, 97, 132, 218, 194, 152, 110, 33, 71, 101, 137, 55, 33, 235, 220, 249, 113, 126, 73, 175, 92, 148, 49, 17, 203, 220, 121, 94, 36, 187, 210, 238, 228, 129, 163, 252, 55, 219, 189, 1, 154, 113, 60, 10, 32, 218, 173, 43, 111, 196, 250, 197, 147, 49, 8, 159, 129, 205, 78, 167, 0, 111, 193, 165, 113, 16, 47, 143, 73, 207, 214, 163, 29, 12, 149, 14, 27, 121, 25, 207, 250, 194, 52, 110, 193, 108, 80, 157, 186, 129, 57, 156, 96, 174, 113, 189, 190, 83, 215, 120, 247, 69, 241, 175, 142, 52, 243, 151, 69, 125, 75, 215, 68, 160, 26, 140, 16, 184, 45, 171, 87 },
                            PhoneNumber = "5320000002",
                            Plate = "61 AC 63",
                            RoleId = 2,
                            TC = "11111111113"
                        });
                });

            modelBuilder.Entity("RezervationSystem.Entity.Concrete.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BlockID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CustomerID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Floor")
                        .HasColumnType("integer");

                    b.Property<bool>("IsEmpty")
                        .HasColumnType("boolean");

                    b.Property<int>("StyleID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BlockID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StyleID");

                    b.ToTable("Apartments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlockID = 1,
                            CustomerID = 1,
                            Floor = 18,
                            IsEmpty = true,
                            StyleID = 1
                        },
                        new
                        {
                            Id = 2,
                            BlockID = 2,
                            CustomerID = 2,
                            Floor = 19,
                            IsEmpty = true,
                            StyleID = 2
                        },
                        new
                        {
                            Id = 3,
                            BlockID = 3,
                            CustomerID = 3,
                            Floor = 20,
                            IsEmpty = true,
                            StyleID = 3
                        });
                });

            modelBuilder.Entity("RezervationSystem.Entity.Concrete.Block", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Blocks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "A Block"
                        },
                        new
                        {
                            Id = 2,
                            Name = "B Block"
                        },
                        new
                        {
                            Id = 3,
                            Name = "C Block"
                        });
                });

            modelBuilder.Entity("RezervationSystem.Entity.Concrete.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Balance")
                        .HasColumnType("integer");

                    b.Property<int>("CardNumber")
                        .HasColumnType("integer");

                    b.Property<int>("CardPassword")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CustomerID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerID");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 3000,
                            CardNumber = 11223344,
                            CardPassword = 1234,
                            CustomerID = 1
                        },
                        new
                        {
                            Id = 2,
                            Balance = 4000,
                            CardNumber = 11112222,
                            CardPassword = 4321,
                            CustomerID = 2
                        },
                        new
                        {
                            Id = 3,
                            Balance = 5000,
                            CardNumber = 33334444,
                            CardPassword = 1221,
                            CustomerID = 3
                        });
                });

            modelBuilder.Entity("RezervationSystem.Entity.Concrete.Debt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApartmentID")
                        .HasColumnType("integer");

                    b.Property<int>("Cost")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CustomerID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Debts");
                });

            modelBuilder.Entity("RezervationSystem.Entity.Concrete.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CustomerID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("WrotenMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("RezervationSystem.Entity.Concrete.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApartmentID")
                        .HasColumnType("integer");

                    b.Property<int>("Cost")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CustomerID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("RezervationSystem.Entity.Concrete.Style", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Styles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "1+1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "2+1"
                        },
                        new
                        {
                            Id = 3,
                            Name = "3+1"
                        },
                        new
                        {
                            Id = 4,
                            Name = "4+1"
                        },
                        new
                        {
                            Id = 5,
                            Name = "5+1"
                        });
                });

            modelBuilder.Entity("RezervationSystem.Entity.Concrete.Apartment", b =>
                {
                    b.HasOne("RezervationSystem.Entity.Concrete.Block", "Block")
                        .WithMany()
                        .HasForeignKey("BlockID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Concrete.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RezervationSystem.Entity.Concrete.Style", "Style")
                        .WithMany()
                        .HasForeignKey("StyleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Customer");

                    b.Navigation("Style");
                });

            modelBuilder.Entity("RezervationSystem.Entity.Concrete.Card", b =>
                {
                    b.HasOne("Core.Entities.Concrete.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("RezervationSystem.Entity.Concrete.Debt", b =>
                {
                    b.HasOne("RezervationSystem.Entity.Concrete.Apartment", "Apartment")
                        .WithMany()
                        .HasForeignKey("ApartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Concrete.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("RezervationSystem.Entity.Concrete.Message", b =>
                {
                    b.HasOne("Core.Entities.Concrete.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("RezervationSystem.Entity.Concrete.Payment", b =>
                {
                    b.HasOne("RezervationSystem.Entity.Concrete.Apartment", "Apartment")
                        .WithMany()
                        .HasForeignKey("ApartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Concrete.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("Customer");
                });
#pragma warning restore 612, 618
        }
    }
}
